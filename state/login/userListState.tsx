import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { AppState } from "../store";
import { fetchUserAll } from "../../services/user/user";

export interface UserListState {
  list: any;
  status: "idle" | "loading" | "failed";
}

const initialState: UserListState = {
  list: {},
  status: "idle",
};

export const fetchListing = createAsyncThunk("userList/fetchList", async () => {
  const data = await fetchUserAll();
  return data;
});

export const userListSlice = createSlice({
  name: "userList",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    reset: () => initialState,
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchListing.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchListing.fulfilled, (state, action) => {
        state.status = "idle";
        state.list = action.payload;
      });
  },
});

export const { reset } = userListSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const getList = (state: AppState) => state.userList.list;

export default userListSlice.reducer;
